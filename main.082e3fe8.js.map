{"version":3,"sources":["scripts/main.js"],"names":["gameStatus","board","rows","document","querySelectorAll","mainButton","querySelector","gameScore","startMessage","winMassage","loseMessage","score","maxRows","length","maxColumns","hasEmptyCell","x","y","generateRandomTile","classList","remove","emptyCell","Math","floor","random","newValue","tile","getElementById","innerText","add","startGame","forEach","row","rowIndex","children","cell","cellIndex","id","updateTile","element","value","removeZero","filter","number","move","newRow","i","push","moveLeft","movingRow","moveRight","reverse","moveUp","moveDown","addEventListener","e","preventDefault","code"],"mappings":"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","file":"main.082e3fe8.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst rows = document.querySelectorAll('tr');\nconst mainButton = document.querySelector('button');\nconst gameScore = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst winMassage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nlet gameStatus;\nlet board;\nlet score = 0;\nconst maxRows = rows.length;\nconst maxColumns = maxRows;\n\nmainButton.addEventListener('click', () => {\n  mainButton.classList.remove('start');\n  mainButton.classList.add('restart');\n  mainButton.innerText = 'Restart';\n\n  startMessage.classList.add('hidden');\n  winMassage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n\n  score = 0;\n  gameScore.innerText = score;\n  gameStatus = true;\n\n  startGame();\n});\n\nfunction hasEmptyCell() {\n  for (let x = 0; x < maxRows; x++) {\n    for (let y = 0; y < maxColumns; y++) {\n      if (board[x][y] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction generateRandomTile() {\n  if (!hasEmptyCell()) {\n    loseMessage.classList.remove('hidden');\n    gameStatus = false;\n\n    return;\n  }\n\n  let emptyCell = false;\n\n  while (!emptyCell) {\n    const x = Math.floor(Math.random() * maxRows);\n    const y = Math.floor(Math.random() * maxColumns);\n\n    if (board[x][y] === 0) {\n      const newValue = Math.random() < 0.9 ? 2 : 4;\n\n      board[x][y] = newValue;\n\n      const tile = document.getElementById(`${x}-${y}`);\n\n      tile.innerText = newValue;\n      tile.classList.add(`field-cell--${newValue}`);\n      emptyCell = true;\n    }\n  }\n}\n\nfunction startGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  rows.forEach((row, rowIndex) => {\n    [...row.children].forEach((cell, cellIndex) => {\n      cell.id = `${rowIndex}-${cellIndex}`;\n\n      const value = board[rowIndex][cellIndex];\n\n      updateTile(cell, value);\n    });\n  });\n\n  generateRandomTile();\n  generateRandomTile();\n}\n\nfunction updateTile(element, value) {\n  element.innerText = '';\n  element.classList.value = '';\n  element.classList.add('field-cell');\n\n  if (value > 0) {\n    element.classList.add(`field-cell--${value}`);\n    element.innerText = value;\n  }\n\n  if (value === 2048) {\n    winMassage.classList.remove('hidden');\n    gameStatus = false;\n  }\n}\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  if (!gameStatus) {\n    return;\n  }\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      moveLeft();\n      generateRandomTile();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      generateRandomTile();\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      generateRandomTile();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      generateRandomTile();\n      break;\n\n    default:\n      break;\n  }\n});\n\nfunction removeZero(row) {\n  return row.filter(number => number !== 0);\n}\n\nfunction move(row) {\n  let newRow = removeZero(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n\n      score += newRow[i];\n\n      gameScore.innerText = score;\n    }\n  }\n\n  newRow = removeZero(newRow);\n\n  while (newRow.length < maxRows) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction moveLeft() {\n  for (let x = 0; x < maxRows; x++) {\n    const row = board[x];\n    const movingRow = move(row);\n\n    board[x] = movingRow;\n\n    for (let y = 0; y < maxColumns; y++) {\n      const tile = document.getElementById(`${x}-${y}`);\n      const value = board[x][y];\n\n      updateTile(tile, value);\n    }\n  }\n}\n\nfunction moveRight() {\n  for (let x = 0; x < maxRows; x++) {\n    const row = board[x].reverse();\n    const movingRow = move(row);\n\n    board[x] = movingRow.reverse();\n\n    for (let y = 0; y < maxColumns; y++) {\n      const tile = document.getElementById(`${x}-${y}`);\n      const value = board[x][y];\n\n      updateTile(tile, value);\n    }\n  }\n}\n\nfunction moveUp() {\n  for (let y = 0; y < maxColumns; y++) {\n    const row = [board[0][y], board[1][y], board[2][y], board[3][y]];\n    const movingRow = move(row);\n\n    for (let x = 0; x < maxRows; x++) {\n      board[x][y] = movingRow[x];\n\n      const tile = document.getElementById(`${x}-${y}`);\n      const value = board[x][y];\n\n      updateTile(tile, value);\n    }\n  }\n}\n\nfunction moveDown() {\n  for (let y = 0; y < maxColumns; y++) {\n    const row = [board[0][y], board[1][y], board[2][y], board[3][y]].reverse();\n    const movingRow = move(row).reverse();\n\n    for (let x = 0; x < maxRows; x++) {\n      board[x][y] = movingRow[x];\n\n      const tile = document.getElementById(`${x}-${y}`);\n      const value = board[x][y];\n\n      updateTile(tile, value);\n    }\n  }\n}\n"]}